package com.examplesql.talend.components.dataset;

import java.io.Serializable;

import com.examplesql.talend.components.datastore.ExampleSQLDatastore;

import org.talend.sdk.component.api.configuration.Option;
import org.talend.sdk.component.api.configuration.action.Suggestable;
import org.talend.sdk.component.api.configuration.constraint.Min;
import org.talend.sdk.component.api.configuration.constraint.Required;
import org.talend.sdk.component.api.configuration.type.DataSet;
import org.talend.sdk.component.api.configuration.ui.layout.GridLayout;
import org.talend.sdk.component.api.meta.Documentation;

import static org.talend.sdk.component.api.configuration.ui.layout.GridLayout.FormType.ADVANCED;

@DataSet("TableNameDataset")
@GridLayout({
    // the generated layout put one configuration entry per line,
    // customize it as much as needed
    @GridLayout.Row({ "datastore" }),
    @GridLayout.Row({ "tableName" })
})
@GridLayout(names = ADVANCED, value = { @GridLayout.Row("fetchSize") })
@Documentation("TODO fill the documentation for this configuration")
public class TableNameDataset implements Serializable {
    @Option
    @Documentation("TODO fill the documentation for this parameter")
    private ExampleSQLDatastore datastore;

    @Option
    @Required
    @Documentation("The table name")
    @Suggestable(value = "listTables", parameters = "datastore")
    private String tableName;

    @Option
    @Min(0)
    @Documentation("Gives the JDBC driver a hint as to the number of rows that should be fetched from "
            + "the database when more rows are needed for ResultSet objects generated by this Statement.\n"
            + "If the value specified is zero, then the hint is ignored.")
    private int fetchSize = 1000;

    public ExampleSQLDatastore getDatastore() {
        return datastore;
    }

    public TableNameDataset setDatastore(ExampleSQLDatastore datastore) {
        this.datastore = datastore;
        return this;
    }

    public String getTableName() {
        return tableName;
    }

    public TableNameDataset setTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    public int getFetchSize() { return fetchSize; }

    public TableNameDataset setFetchSize(int fetchSize)
    {
        this.fetchSize = fetchSize;
        return this;
    }

    public String getQuery() {
        return "select * from " + this.getTableName();
    }
}