package com.examplesql.talend.components.dataset;

import java.io.Serializable;

import com.examplesql.talend.components.datastore.ExampleSQLDatastore;

import org.talend.sdk.component.api.configuration.Option;
import org.talend.sdk.component.api.configuration.action.Validable;
import org.talend.sdk.component.api.configuration.constraint.Min;
import org.talend.sdk.component.api.configuration.type.DataSet;
import org.talend.sdk.component.api.configuration.ui.layout.GridLayout;
import org.talend.sdk.component.api.configuration.ui.widget.Code;
import org.talend.sdk.component.api.meta.Documentation;

import static org.talend.sdk.component.api.configuration.ui.layout.GridLayout.FormType.ADVANCED;

@DataSet("SQLQueryDataset")
@GridLayout({
        // the generated layout put one configuration entry per line,
        // customize it as much as needed
        @GridLayout.Row({ "datastore" }),
        @GridLayout.Row({ "sqlQuery" })
})
@GridLayout(names = ADVANCED, value = { @GridLayout.Row("fetchSize") })
@Documentation("TODO fill the documentation for this configuration")
public class SQLQueryDataset implements Serializable {
    @Option
    @Documentation("TODO fill the documentation for this parameter")
    private ExampleSQLDatastore datastore;

    @Option
    @Code("sql")
    @Validable("validateQuery")
    @Documentation("A valid read only query is the source type is Query")
    private String sqlQuery;

    @Option
    @Min(0)
    @Documentation("Gives the JDBC driver a hint as to the number of rows that should be fetched from "
            + "the database when more rows are needed for ResultSet objects generated by this Statement.\n"
            + "If the value specified is zero, then the hint is ignored.")
    private int fetchSize = 1000;

    public ExampleSQLDatastore getDatastore() {
        return datastore;
    }

    public SQLQueryDataset setDatastore(ExampleSQLDatastore datastore) {
        this.datastore = datastore;
        return this;
    }

    public String getSqlQuery() {
        return sqlQuery;
    }

    public SQLQueryDataset setSqlQuery(String sqlQuery) {
        this.sqlQuery = sqlQuery;
        return this;
    }

    public int getFetchSize() { return fetchSize; }

    public SQLQueryDataset setFetchSize(int fetchSize)
    {
        this.fetchSize = fetchSize;
        return this;
    }

    public String getQuery() { return this.sqlQuery; }
}